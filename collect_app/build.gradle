apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: '../config/quality.gradle'
apply from: '../config/jacoco.gradle'

import com.android.ddmlib.DdmPreferences

DdmPreferences.setTimeOut(60000)

ant.condition(property: 'os', value: 'windows') {
    os(family: 'windows')
}
ant.condition(property: 'os', value: 'unix') {
    os(family: 'unix')
}

def secretsFile = file(System.properties['user.home'] + '/.gradle/gradle.properties')
def secrets = new Properties()
if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
}

android {
    compileSdkVersion(28)

    defaultConfig {
        applicationId('io.ffem.collect')
        minSdkVersion(19)
        targetSdkVersion(28)
        versionCode 6
        versionName "Beta 1.2"
        testInstrumentationRunner('android.support.test.runner.AndroidJUnitRunner')
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'collect'
        resConfigs "en", "hi"
    }

    flavorDimensions "default"

    productFlavors {
        branded {
            applicationId "io.ffem.collect"
        }
        odk {
            applicationId "org.odk.collect.android"
        }
    }

    signingConfigs {
        release {
            if (secrets.getProperty('FFEM_RELEASE_STORE_FILE')) {
                storeFile file(secrets.getProperty('FFEM_RELEASE_STORE_FILE'))
                storePassword secrets.getProperty('FFEM_RELEASE_STORE_PASSWORD')
                keyAlias secrets.getProperty('FFEM_RELEASE_KEY_ALIAS')
                keyPassword secrets.getProperty('FFEM_RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        // Release build for all forks
        release {
            if (secrets.getProperty('FFEM_RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "FIREBASE_CRASHLYTICS_ENABLED", "false")
        }
        // Release build for the official ODK Collect app
        odkCollectRelease {
            if (secrets.getProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
            minifyEnabled(true)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue("bool", "FIREBASE_CRASHLYTICS_ENABLED", "true")
        }
        debug {
            debuggable(true)
            testCoverageEnabled(true)
            resValue("bool", "FIREBASE_CRASHLYTICS_ENABLED", "false")
        }
    }

    // https://stackoverflow.com/a/27119543/152938
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }
    testVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = new File(outputFileName.replace(".apk", "-${defaultConfig.versionName}.apk"))
        }
    }

    packagingOptions {
        // Pick first occurrence of any files that cause conflicts, as defined
        // in common.gradle
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        pickFirst 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyReader'
        pickFirst 'META-INF/services/javax.ws.rs.ext.MessageBodyWriter'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        javaMaxHeapSize '2048M'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                // https://discuss.circleci.com/t/11207/24
                // it seems any number works, but 1024 - 2048 seem reasonable
                maxHeapSize = "2048M"
            }
        }
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')

        force('com.google.code.findbugs:jsr305:1.3.9')
    }
    transitive = true
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "com.android.support:support-v13:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:customtabs:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:design:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:design:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:exifinterface:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:multidex:1.0.3"

    implementation "com.google.android.gms:play-services-analytics:16.0.5"
    implementation "com.google.android.gms:play-services-auth:16.0.1"
    implementation "com.google.android.gms:play-services-maps:16.0.0"
    implementation "com.google.android.gms:play-services-location:16.0.0"

    implementation "com.google.firebase:firebase-core:16.0.5"
    implementation "com.crashlytics.sdk.android:crashlytics:2.9.6"

    implementation("com.google.guava:guava:26.0-android")

    implementation("com.google.code.gson:gson:2.8.2") {
        exclude group: 'org.apache.httpcomponents'
    }

    implementation("com.google.http-client:google-http-client:1.22.0") {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation("com.google.oauth-client:google-oauth-client:1.22.0") {
        exclude group: 'org.apache.httpcomponents'
    }

    implementation 'bikramsambat:bikram-sambat:1.0.0'
    implementation "com.evernote:android-job:1.2.5"
    implementation "com.rarepebble:colorpicker:2.4.1"
    implementation "commons-io:commons-io:2.6"
    implementation "net.sf.kxml:kxml2:2.3.0"
    implementation "net.sf.opencsv:opencsv:2.3"
    implementation("org.opendatakit:opendatakit-javarosa:2.12.1") {
        exclude group: 'joda-time'
        exclude group: 'org.slf4j'
    }
    implementation "com.karumi:dexter:5.0.0"
    implementation "org.osmdroid:osmdroid-android:5.6.4"
    implementation "org.slf4j:slf4j-android:1.6.1-RC1"
    implementation("com.google.api-client:google-api-client-android:1.22.0") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-drive:v3-rev64-1.22.0") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'
    }
    implementation("com.google.apis:google-api-services-sheets:v4-rev463-1.22.0") {
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.google.guava'

    }
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "com.google.zxing:core:3.3.2"
    implementation "com.journeyapps:zxing-android-embedded:3.6.0"
    implementation "net.danlew:android.joda:2.9.9"

    // Real LeakCanary for debug builds only: notifications, analysis, etc
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.leakyCanaryVersion}"
    // No-Op version of LeakCanary for release builds: no notifications, no analysis, nothing
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.leakyCanaryVersion}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.leakyCanaryVersion}"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.leakyCanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.leakyCanaryVersion}"

    // Android Architecture Components:
    implementation "android.arch.lifecycle:extensions:1.1.1"

    // Dagger:
    implementation "com.google.dagger:dagger-android:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"

    // RxJava 2:
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "io.reactivex.rxjava2:rxjava:2.1.17"

    // Better "Subjects" for Rx:
    implementation "com.jakewharton.rxrelay2:rxrelay:2.0.0"

    // Android bindings for Rx:
    implementation "com.jakewharton.rxbinding2:rxbinding:2.0.0"

    // RxLifecycle (binds subscription cleanup to component lifecycle):
    implementation "com.trello.rxlifecycle2:rxlifecycle:${rootProject.rxLifecycleVersion}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:${rootProject.rxLifecycleVersion}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android-lifecycle:${rootProject.rxLifecycleVersion}"

    // WorkManager for specifying deferrable, asynchronous tasks
    implementation("android.arch.work:work-runtime:${rootProject.workManagerVersion}") {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }
    // Optional JobDispatcher support so devices with Play Services do better than AlarmManager
    implementation("android.arch.work:work-firebase:${rootProject.workManagerVersion}") {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    // Makes binding to Views easy:
    implementation "com.jakewharton:butterknife:8.8.1"
    annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"

    // Annotations understood by FindBugs
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // Used to generate documentation screenshots.
    androidTestImplementation "tools.fastlane:screengrab:1.1.0"

    // Testing-only dependencies
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.23.0"
    testImplementation "org.robolectric:robolectric:4.0"
    testImplementation "org.robolectric:shadows-multidex:4.0"

    // power mock (for mocking final methods which is not handled by mockito)
    testImplementation "org.powermock:powermock-module-junit4:2.0.0-RC.1"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.0-RC.1"

    androidTestImplementation "org.mockito:mockito-android:2.23.0"
    androidTestImplementation("com.android.support.test:runner:1.0.2") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    androidTestImplementation("com.android.support.test.espresso:espresso-intents:3.0.2") {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.2') {
        exclude group: 'com.android.support'
        exclude group: 'javax.inject'
    }

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:3.10.0"

    androidTestImplementation "android.arch.work:work-testing:${rootProject.workManagerVersion}"
}

// Must be at bottom to prevent dependency collisions
// https://developers.google.com/android/guides/google-services-plugin
apply plugin: 'com.google.gms.google-services'



